Structural Variant Analysis using Simulated Data
================================================


Getting Started
---------------
As a quick introduction to structural variant analysis we will use the simulated data provided by the ICGC-TCGA DREAM Mutation Calling challenge [Dream]_ and Delly [Rausch2012]_, a structural variant prediction method. The data has been further down-sampled to speed up all analyses discussed hereafter. The simulated data has already been aligned to chr20 of hg19. The chr20 reference FASTA file is called '20.fa'. There is one bam file [Bam]_ for the tumor (file tumor20.bam) and one for the matched normal (file normal20.bam). Delly [Rausch2012]_ uses paired-end mapping to discover structural variants and the method can handle paired-ends from different libraries as long as these have been tagged with unique read-groups (@RG tags). These read-groups are listed in the bam header.

.. code-block:: bash

   samtools view -H tumor20.bam 


Structural Variant Discovery
----------------------------

Since this is simulated data we will skip the alignment quality control and move on directly to the structural variant calling. Delly [Rausch2012]_ calls structural variants jointly on the tumor and normal genome and outputs a VCF (variant-call-format) file. The VCF specification can be found on the VCFtools website [VCFtools]_. The ICGC-TCGA DREAM Mutation Calling challenge simulated only deletions, duplications and inversions so we will skip the translocation prediction. Besides the bam files, you can provide a reference genome which then triggers the split-read search of Delly. You can also provide a text file with regions to exclude from the analysis of structural variants. The default exclude map of Delly includes the telomeric and centromeric regions of all human chromosomes since these regions cannot be accurately analyzed with short-read data. The below commands all run for about 5 minutes, the precomputed result files are present in the './precomputed' subfolder.

.. code-block:: bash

   delly -t DEL -g 20.fa -x hg19.ex -s 15 -o del.vcf tumor20.bam normal20.bam
   delly -t DUP -g 20.fa -x hg19.ex -o dup.vcf tumor20.bam normal20.bam
   delly -t INV -g 20.fa -x hg19.ex -o inv.vcf tumor20.bam normal20.bam

A vcf file [VCFtools]_ has multiple header lines starting with the hash # sign. Below the header line, there is one record for each structural variant. The record format is described in the below table:

   =======  ==========  ===================================================================================
   **Col**  **Field**   **Description**
   -------  ----------  -----------------------------------------------------------------------------------
   1        CHROM       Chromosome name
   2        POS         1-based position. For an indel, this is the position preceding the indel.
   3        ID          Variant identifier. Usually the dbSNP rsID.
   4        REF         Reference sequence at POS involved in the variant. For a SNP, it is a single base.
   5        ALT         Comma delimited list of alternative sequence(s).
   6        QUAL        Phred-scaled probability of all samples being homozygous reference.
   7        FILTER      Semicolon delimited list of filters that the variant fails to pass.
   8        INFO        Semicolon delimited list of variant information.
   9        FORMAT      Colon delimited list of the format of individual genotypes in the following fields.
   10       +Sample(s)  Individual genotype information defined by FORMAT.
   =======  ==========  ===================================================================================

You can look at the header of the vcf file using grep, '-A 1' includes the first structural variant record in the file:

.. code-block:: bash

   grep "^#" -A 1 inv.vcf

In general, Delly uses the VCF:INFO fields for structural variant site information, such as how confident the structural variant prediction is and how accurate the breakpoints are. The genotype fields contain the actual sample genotype, its genotype quality and genotype likelihoods and various count fields for the variant and reference supporting reads and spanning pairs. If you browse through the vcf file you will notice that a subset of the Delly structural variant predictions have been refined using split-reads. These precise variants are flagged in the vcf info field with the tag 'PRECISE'. To count the number of precise and imprecise variants you can simply use grep.

.. code-block:: bash

   grep -c -P "[\t;]PRECISE" *.vcf
   grep -c -P "[\t;]IMPRECISE" *.vcf

Please note that this vcf file contains germline and somatic structural variants but also false positives caused by repeat-induced mis-mappings or incomplete reference sequences. As a final step we have to use the structural variant site information and the tumor and normal genotype information to filter a set of confident somatic structural variants.



Somatic Structural Variant Filtering
------------------------------------

Delly ships with a somatic filtering python script. For a set of confident somatic calls one could exclude all structural variants <400bp, require a minimum variant allele frequency of 10%, no support in the matched normal and an overall confident structural variant site prediction.

.. code-block:: bash

   python2.7 bin/somaticFilter.py -t DEL -v del.vcf -o del.filt.vcf -a 0.1 -m 400 -f
   python2.7 bin/somaticFilter.py -t DUP -v dup.vcf -o dup.filt.vcf -a 0.1 -m 400 -f
   python2.7 bin/somaticFilter.py -t INV -v inv.vcf -o inv.filt.vcf -a 0.1 -m 400 -f

Using VCFtools [VCFtools]_ we can merge all somatic structural variants together in a single vcf file. The VCFtools provide a number of useful tools to merge, concatenate, validate, filter, subset and query vcf files.

.. code-block:: bash

   vcf-concat del.filt.vcf dup.filt.vcf inv.filt.vcf  | vcf-sort > somatic.sv.vcf
   vcf-validator somatic.sv.vcf

For large VCF files you should also zip and index them using bgzip and tabix.

.. code-block:: bash

   bgzip somatic.sv.vcf 
   tabix somatic.sv.vcf.gz

The final step will be to browse some of these somatic structural variants in IGV [IGV]_. To make that easier we will also create a bed file with the start and end coordinates of each structural variant. This vcf2bed conversion is a bit ugly because VCF was designed for single-nucleotide variants, so I wrote a small shell script to do this conversion, called 'vcf2Bed.sh'.

.. code-block:: bash

   ./bin/vcf2Bed.sh somatic.sv.vcf.gz

We then start IGV using the chr20 reference.

.. code-block:: bash

   igv.sh -g 20.fa


Once IGV has started use 'File' and 'Load from File' to load the tumor and normal bam alignment file. Next, we import our 'somatic.sv.bed' file using 'Regions' and 'Import Regions'. The somatic structural variants can then be browsed easily using 'Regions' and 'Region Navigator'. Once you have selected a structural variant in the Region Navigator, just click 'View' which will center the IGV alignment view on the selected structural variant. It's usually best to zoom out then by clicking on the '-' sign once in the toolbar at the top, so you can view all supporting abnormal paired-ends. To highlight the abnormal paired-ends please right click in IGV on tumor20.bam and activate 'View as pairs'. In the same menu, please open 'Color alignments by' and then switch to "pair orientation', afterwards repeat these steps for normal20.bam. You can obviously play around with all the different visualization options but the above two are what I found most useful for a discordant paired-end analysis. This concludes my short structural variant practical. I hope you enjoyed it!
